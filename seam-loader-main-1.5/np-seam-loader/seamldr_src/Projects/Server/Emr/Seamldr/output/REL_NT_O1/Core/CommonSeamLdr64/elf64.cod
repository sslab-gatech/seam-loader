; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24245.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	RelocateImage
PUBLIC	RelocateSection
;	COMDAT pdata
pdata	SEGMENT
$pdata$RelocateImage DD imagerel $LN16
	DD	imagerel $LN16+115
	DD	imagerel $unwind$RelocateImage
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$RelocateSection DD imagerel $LN14
	DD	imagerel $LN14+110
	DD	imagerel $unwind$RelocateSection
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RelocateSection DD 020501H
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RelocateImage DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
; Function compile flags: /Ogsp
; File d:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\core\commonseamldr64\elf64.c
;	COMDAT RelocateSection
_TEXT	SEGMENT
ElfImage$ = 8
SectionHeader$ = 16
RelocationAddr$ = 24
RelocateSection PROC					; COMDAT

; 24   : UINT64 RelocateSection(UINTN ElfImage, Elf64_Shdr* SectionHeader, UINTN RelocationAddr) {

$LN14:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx

; 25   :     Elf64_Rela* CurRela;
; 26   : 
; 27   :     if (SectionHeader->sh_entsize == 0) {

  00005	4c 8b 4a 38	 mov	 r9, QWORD PTR [rdx+56]
  00009	45 33 d2	 xor	 r10d, r10d
  0000c	4c 8b da	 mov	 r11, rdx
  0000f	48 8b d9	 mov	 rbx, rcx
  00012	4d 85 c9	 test	 r9, r9
  00015	75 0c		 jne	 SHORT $LN5@RelocateSe
$LN6@RelocateSe:

; 28   :         return NP_SEAMLDR_PARAMS_STATUS_EBADPARAM;

  00017	48 b8 00 00 00
	00 00 00 00 80	 mov	 rax, -9223372036854775808 ; 8000000000000000H
  00021	eb 45		 jmp	 SHORT $LN1@RelocateSe
$LN5@RelocateSe:

; 29   :     }
; 30   : 
; 31   :     for (UINT64 i = 0; i < SectionHeader->sh_size / SectionHeader->sh_entsize; i++) {        

  00023	49 8b 43 20	 mov	 rax, QWORD PTR [r11+32]
  00027	33 d2		 xor	 edx, edx
  00029	49 f7 f1	 div	 r9
  0002c	48 85 c0	 test	 rax, rax
  0002f	74 35		 je	 SHORT $LN3@RelocateSe
$LL4@RelocateSe:

; 32   :         CurRela = (Elf64_Rela*)(ElfImage + SectionHeader->sh_addr + i * SectionHeader->sh_entsize);

  00031	4d 0f af ca	 imul	 r9, r10
  00035	4d 03 4b 10	 add	 r9, QWORD PTR [r11+16]

; 33   :         if (CurRela->r_info == R_X86_64_RELATIVE) {            

  00039	49 83 7c 19 08
	08		 cmp	 QWORD PTR [r9+rbx+8], 8
  0003f	75 d6		 jne	 SHORT $LN6@RelocateSe

; 34   :             *(UINT64 *)(ElfImage + CurRela->r_offset) = RelocationAddr + CurRela->r_addend;

  00041	49 8b 04 19	 mov	 rax, QWORD PTR [r9+rbx]
  00045	33 d2		 xor	 edx, edx
  00047	49 8b 4c 19 10	 mov	 rcx, QWORD PTR [r9+rbx+16]
  0004c	49 ff c2	 inc	 r10
  0004f	49 03 c8	 add	 rcx, r8
  00052	48 89 0c 03	 mov	 QWORD PTR [rbx+rax], rcx
  00056	4d 8b 4b 38	 mov	 r9, QWORD PTR [r11+56]
  0005a	49 8b 43 20	 mov	 rax, QWORD PTR [r11+32]
  0005e	49 f7 f1	 div	 r9
  00061	4c 3b d0	 cmp	 r10, rax
  00064	72 cb		 jb	 SHORT $LL4@RelocateSe
$LN3@RelocateSe:

; 35   :         }
; 36   :         else {
; 37   :             COMSERIALOUT("Unsupported relocation!!\n");
; 38   :             return NP_SEAMLDR_PARAMS_STATUS_EBADPARAM;
; 39   :         }
; 40   :     }
; 41   : 
; 42   :     return NP_SEAMLDR_PARAMS_STATUS_SUCCESS;

  00066	33 c0		 xor	 eax, eax
$LN1@RelocateSe:

; 43   : }

  00068	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  0006d	c3		 ret	 0
RelocateSection ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\core\commonseamldr64\elf64.c
;	COMDAT RelocateImage
_TEXT	SEGMENT
ElfImage$ = 48
RelocationAddr$ = 56
RelocateImage PROC					; COMDAT

; 45   : UINT64 RelocateImage(UINTN ElfImage, UINTN RelocationAddr) {

$LN16:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 46   :     Elf64_Ehdr* ElfHeader = (Elf64_Ehdr*)ElfImage;
; 47   :     Elf64_Shdr* CurSheader;
; 48   :     UINT64 Status = NP_SEAMLDR_PARAMS_STATUS_SUCCESS;

  00014	33 ed		 xor	 ebp, ebp
  00016	48 8b f2	 mov	 rsi, rdx
  00019	66 3b 69 3c	 cmp	 bp, WORD PTR [rcx+60]
  0001d	44 8b c5	 mov	 r8d, ebp

; 49   : 
; 50   :     for (UINT32 i = 0; i < ElfHeader->e_shnum; i++) {        

  00020	8b fd		 mov	 edi, ebp
  00022	48 8b d9	 mov	 rbx, rcx
$LN14@RelocateIm:
  00025	73 34		 jae	 SHORT $LN13@RelocateIm

; 51   :         CurSheader = (Elf64_Shdr*)(ElfImage + ElfHeader->e_shoff + (UINT64)i * ElfHeader->e_shentsize);

  00027	0f b7 53 3a	 movzx	 edx, WORD PTR [rbx+58]
  0002b	8b c7		 mov	 eax, edi
  0002d	48 0f af d0	 imul	 rdx, rax
  00031	48 03 53 28	 add	 rdx, QWORD PTR [rbx+40]
  00035	48 03 d3	 add	 rdx, rbx

; 52   :         if (CurSheader->sh_type == SHT_RELA) {

  00038	83 7a 04 04	 cmp	 DWORD PTR [rdx+4], 4
  0003c	75 13		 jne	 SHORT $LN2@RelocateIm

; 53   :             Status = RelocateSection(ElfImage, CurSheader, RelocationAddr);

  0003e	4c 8b c6	 mov	 r8, rsi
  00041	48 8b cb	 mov	 rcx, rbx
  00044	e8 00 00 00 00	 call	 RelocateSection
  00049	4c 8b c0	 mov	 r8, rax

; 54   :             if (Status != NP_SEAMLDR_PARAMS_STATUS_SUCCESS) {

  0004c	48 85 c0	 test	 rax, rax
  0004f	75 0d		 jne	 SHORT $LN1@RelocateIm
$LN2@RelocateIm:

; 49   : 
; 50   :     for (UINT32 i = 0; i < ElfHeader->e_shnum; i++) {        

  00051	0f b7 4b 3c	 movzx	 ecx, WORD PTR [rbx+60]
  00055	ff c7		 inc	 edi
  00057	3b f9		 cmp	 edi, ecx
  00059	eb ca		 jmp	 SHORT $LN14@RelocateIm
$LN13@RelocateIm:

; 55   :                 return Status;
; 56   :             }
; 57   :         }
; 58   :     }
; 59   : 
; 60   :     return Status;

  0005b	49 8b c0	 mov	 rax, r8
$LN1@RelocateIm:

; 61   : }

  0005e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00063	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00068	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0006d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00071	5f		 pop	 rdi
  00072	c3		 ret	 0
RelocateImage ENDP
_TEXT	ENDS
END

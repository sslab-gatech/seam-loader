; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24245.0 

	TITLE	D:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\Core\Common\Rotl.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__lrotl
PUBLIC	__rotl
PUBLIC	__allshl
; Function compile flags: /Ogsp
; File d:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\core\common\rotl.c
;	COMDAT __allshl
_TEXT	SEGMENT
__allshl PROC						; COMDAT

; 43   :   __asm {
; 44   :     cmp cl, 1Fh

  00000	80 f9 1f	 cmp	 cl, 31			; 0000001fH

; 45   :     jbe L1

  00003	76 0e		 jbe	 SHORT $L1$4

; 46   :     mov edx, eax

  00005	8b d0		 mov	 edx, eax

; 47   :     mov eax, 0

  00007	b8 00 00 00 00	 mov	 eax, 0

; 48   :     sub ecx, 20h

  0000c	83 e9 20	 sub	 ecx, 32			; 00000020H

; 49   :     shl edx, cl

  0000f	d3 e2		 shl	 edx, cl

; 50   :     jmp L2

  00011	eb 05		 jmp	 SHORT $L2$5
$L1$4:

; 51   : L1:
; 52   :     shld edx, eax, cl

  00013	0f a5 c2	 shld	 edx, eax, cl

; 53   :     shl eax, cl

  00016	d3 e0		 shl	 eax, cl
$L2$5:

; 54   : L2:
; 55   :     ret

  00018	c3		 ret	 0
__allshl ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\core\common\rotl.c
;	COMDAT __rotl
_TEXT	SEGMENT
_val$ = 8						; size = 4
_shift$ = 12						; size = 4
__rotl	PROC						; COMDAT

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 39   : }

  00003	5d		 pop	 ebp

; 38   :   return _lrotl(val, shift);

  00004	e9 00 00 00 00	 jmp	 __lrotl
__rotl	ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\core\common\rotl.c
;	COMDAT __lrotl
_TEXT	SEGMENT
_tmp$ = 8						; size = 4
_val$ = 8						; size = 4
_shift$ = 12						; size = 4
__lrotl	PROC						; COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   :   UINT32 tmp = val;

  00003	8b 45 08	 mov	 eax, DWORD PTR _val$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _tmp$[ebp], eax

; 26   : 
; 27   :   _asm {
; 28   :     mov eax, tmp

  00009	8b 45 08	 mov	 eax, DWORD PTR _tmp$[ebp]

; 29   :     mov ecx, shift

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _shift$[ebp]

; 30   :     rol eax, cl

  0000f	d3 c0		 rol	 eax, cl

; 31   :     mov tmp, eax

  00011	89 45 08	 mov	 DWORD PTR _tmp$[ebp], eax

; 32   :   }
; 33   :   return tmp;

  00014	8b 45 08	 mov	 eax, DWORD PTR _tmp$[ebp]

; 34   : }

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
__lrotl	ENDP
_TEXT	ENDS
END

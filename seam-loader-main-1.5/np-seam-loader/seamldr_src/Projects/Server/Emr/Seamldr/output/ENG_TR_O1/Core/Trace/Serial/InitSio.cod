; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24245.0 

	TITLE	D:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\Core\Trace\Serial\InitSio.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_SioSupportTab
EDATA32	SEGMENT
_SioSupportTab DD 00H
	ORG $+28
_saveLcr DB	00H
_saveDll DB	00H
_saveDlh DB	00H
EDATA32	ENDS
PUBLIC	_InitSioUart
PUBLIC	_RestoreSioUart
PUBLIC	_InitSio
PUBLIC	??_C@_0M@PIJFCECB@InitSioUart?$AA@IMHBAIGO@	;  ?? ::IMHBAIGO::`string'
PUBLIC	??_C@_0P@FCDBIBAD@RestoreSioUart?$AA@IMHBAIGO@	;  ?? ::IMHBAIGO::`string'
EXTRN	_InPort8Tr:PROC
EXTRN	_OutPort8Tr:PROC
;	COMDAT ??_C@_0P@FCDBIBAD@RestoreSioUart?$AA@IMHBAIGO@
EDATA32	SEGMENT
??_C@_0P@FCDBIBAD@RestoreSioUart?$AA@IMHBAIGO@ DB 'RestoreSioUart', 00H ;  ?? ::IMHBAIGO::`string'
EDATA32	ENDS
;	COMDAT ??_C@_0M@PIJFCECB@InitSioUart?$AA@IMHBAIGO@
EDATA32	SEGMENT
??_C@_0M@PIJFCECB@InitSioUart?$AA@IMHBAIGO@ DB 'InitSioUart', 00H ;  ?? ::IMHBAIGO::`string'
EDATA32	ENDS
; Function compile flags: /Ogsp
; File d:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\core\trace\serial\initsio.c
;	COMDAT _InitSio
_TEXT	SEGMENT
_InitSio PROC						; COMDAT

; 51   : {

  00000	56		 push	 esi

; 52   :   UINT32 Idx;
; 53   : 
; 54   :   for (Idx = 0; Idx < MAX_SIO_NUM; Idx++) {

  00001	33 f6		 xor	 esi, esi
$LL4@InitSio:

; 55   :     if (SioSupportTab[Idx] == NULL) {

  00003	8b 86 00 00 00
	00		 mov	 eax, DWORD PTR _SioSupportTab[esi]
  00009	85 c0		 test	 eax, eax
  0000b	74 0e		 je	 SHORT $LN3@InitSio

; 56   :       break;
; 57   :     }
; 58   :     if ((*SioSupportTab[Idx])()) {

  0000d	ff d0		 call	 eax
  0000f	85 c0		 test	 eax, eax
  00011	75 0c		 jne	 SHORT $LN10@InitSio

; 52   :   UINT32 Idx;
; 53   : 
; 54   :   for (Idx = 0; Idx < MAX_SIO_NUM; Idx++) {

  00013	83 c6 04	 add	 esi, 4
  00016	83 fe 20	 cmp	 esi, 32			; 00000020H
  00019	72 e8		 jb	 SHORT $LL4@InitSio
$LN3@InitSio:

; 60   :     }
; 61   :   }
; 62   : 
; 63   :   return FALSE;

  0001b	33 c0		 xor	 eax, eax
  0001d	5e		 pop	 esi

; 64   : }

  0001e	c3		 ret	 0
$LN10@InitSio:

; 59   :       return TRUE;

  0001f	33 c0		 xor	 eax, eax
  00021	40		 inc	 eax
  00022	5e		 pop	 esi

; 64   : }

  00023	c3		 ret	 0
_InitSio ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\core\trace\serial\initsio.c
;	COMDAT _RestoreSioUart
_TEXT	SEGMENT
_RestoreSioUart PROC					; COMDAT

; 123  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 124  :   //
; 125  :   // Cleanup before handing off to BIOS
; 126  :   // Restore original UART register values
; 127  :   //
; 128  :   #ifdef MKF_LPSS_UART_SUPPORT
; 129  :   WriteMmioByte(UART2_BAR + 4 * LINE_CONTROL, DIVISOR_LATCH_ACCESS);
; 130  :   WriteMmioByte(UART2_BAR + 4 * DIVISOR_LATCH_HIGH, saveDlh);
; 131  :   WriteMmioByte(UART2_BAR + 4 * DIVISOR_LATCH_LOW, saveDll);
; 132  :   WriteMmioByte(UART2_BAR + 4 * LINE_CONTROL, saveLcr);
; 133  :   #else
; 134  :   OutPort8(COM_PORT + LINE_CONTROL, DIVISOR_LATCH_ACCESS);

  00002	68 86 00 00 00	 push	 134			; 00000086H
  00007	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0P@FCDBIBAD@RestoreSioUart?$AA@IMHBAIGO@
  0000c	bf fb 03 00 00	 mov	 edi, 1019		; 000003fbH
  00011	56		 push	 esi
  00012	68 80 00 00 00	 push	 128			; 00000080H
  00017	57		 push	 edi
  00018	e8 00 00 00 00	 call	 _OutPort8Tr

; 135  :   OutPort8(COM_PORT + DIVISOR_LATCH_HIGH, saveDlh);

  0001d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _saveDlh
  00024	68 87 00 00 00	 push	 135			; 00000087H
  00029	56		 push	 esi
  0002a	50		 push	 eax
  0002b	68 f9 03 00 00	 push	 1017			; 000003f9H
  00030	e8 00 00 00 00	 call	 _OutPort8Tr

; 136  :   OutPort8(COM_PORT + DIVISOR_LATCH_LOW, saveDll);

  00035	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _saveDll
  0003c	68 88 00 00 00	 push	 136			; 00000088H
  00041	56		 push	 esi
  00042	50		 push	 eax
  00043	68 f8 03 00 00	 push	 1016			; 000003f8H
  00048	e8 00 00 00 00	 call	 _OutPort8Tr

; 137  :   OutPort8(COM_PORT + LINE_CONTROL, saveLcr);

  0004d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _saveLcr
  00054	68 89 00 00 00	 push	 137			; 00000089H
  00059	56		 push	 esi
  0005a	50		 push	 eax
  0005b	57		 push	 edi
  0005c	e8 00 00 00 00	 call	 _OutPort8Tr
  00061	83 c4 40	 add	 esp, 64			; 00000040H
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi

; 138  :   #endif
; 139  : }

  00066	c3		 ret	 0
_RestoreSioUart ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\core\trace\serial\initsio.c
;	COMDAT _InitSioUart
_TEXT	SEGMENT
_InitSioUart PROC					; COMDAT

; 79   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 80   :   #ifdef MKF_LPSS_UART_SUPPORT
; 81   :   saveLcr = ReadMmioByte(UART2_BAR + 4 * LINE_CONTROL);
; 82   :   WriteMmioByte(UART2_BAR + 4 * LINE_CONTROL, DIVISOR_LATCH_ACCESS);
; 83   :   // Set Baud rate to 115k in Divisor Latch
; 84   :   saveDll = ReadMmioByte(UART2_BAR + 4 * DIVISOR_LATCH_LOW);
; 85   :   WriteMmioByte(UART2_BAR + 4 * DIVISOR_LATCH_LOW, 0x01);
; 86   :   saveDlh = ReadMmioByte(UART2_BAR + 4 * DIVISOR_LATCH_HIGH);
; 87   :   WriteMmioByte(UART2_BAR + 4 * DIVISOR_LATCH_HIGH, 0x00);
; 88   :   WriteMmioByte(UART2_BAR + 4 * LINE_CONTROL, NO_STOP | NO_PARITY | BITS8);
; 89   :   //Enable FIFOs using the FIFO Control register (FCR)which is at offset 0x2.
; 90   :   WriteMmioByte(UART2_BAR + 4 * FIFO_CONTROL, 0x01);
; 91   :   //Put the Modem Control register (MCR)in to reset state.MCR is at offset 0x04
; 92   :   WriteMmioByte(UART2_BAR + 4 * MODEM_CONTROL, 0x02);
; 93   :   #else
; 94   :   //
; 95   :   // save original UART register values,
; 96   :   //   to restore later (if needed)
; 97   :   //
; 98   :   saveLcr = InPort8(COM_PORT + LINE_CONTROL);

  00003	6a 62		 push	 98			; 00000062H
  00005	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_0M@PIJFCECB@InitSioUart?$AA@IMHBAIGO@
  0000a	bf fb 03 00 00	 mov	 edi, 1019		; 000003fbH
  0000f	53		 push	 ebx
  00010	57		 push	 edi
  00011	e8 00 00 00 00	 call	 _InPort8Tr

; 99   :   OutPort8(COM_PORT + LINE_CONTROL, DIVISOR_LATCH_ACCESS);

  00016	6a 63		 push	 99			; 00000063H
  00018	53		 push	 ebx
  00019	68 80 00 00 00	 push	 128			; 00000080H
  0001e	57		 push	 edi
  0001f	a2 00 00 00 00	 mov	 BYTE PTR _saveLcr, al
  00024	e8 00 00 00 00	 call	 _OutPort8Tr

; 100  :   // Set Baud rate to 115k in Divisor Latch
; 101  :   saveDll = InPort8(COM_PORT + DIVISOR_LATCH_LOW);

  00029	6a 65		 push	 101			; 00000065H
  0002b	53		 push	 ebx
  0002c	8d 77 fd	 lea	 esi, DWORD PTR [edi-3]
  0002f	56		 push	 esi
  00030	e8 00 00 00 00	 call	 _InPort8Tr

; 102  :   OutPort8(COM_PORT + DIVISOR_LATCH_LOW, 0x01);

  00035	6a 66		 push	 102			; 00000066H
  00037	53		 push	 ebx
  00038	6a 01		 push	 1
  0003a	56		 push	 esi
  0003b	a2 00 00 00 00	 mov	 BYTE PTR _saveDll, al
  00040	e8 00 00 00 00	 call	 _OutPort8Tr

; 103  :   saveDlh = InPort8(COM_PORT + DIVISOR_LATCH_HIGH);

  00045	6a 67		 push	 103			; 00000067H
  00047	53		 push	 ebx
  00048	46		 inc	 esi
  00049	56		 push	 esi
  0004a	e8 00 00 00 00	 call	 _InPort8Tr
  0004f	83 c4 44	 add	 esp, 68			; 00000044H
  00052	a2 00 00 00 00	 mov	 BYTE PTR _saveDlh, al

; 104  :   OutPort8(COM_PORT + DIVISOR_LATCH_HIGH, 0x00);

  00057	6a 68		 push	 104			; 00000068H
  00059	53		 push	 ebx
  0005a	6a 00		 push	 0
  0005c	56		 push	 esi
  0005d	e8 00 00 00 00	 call	 _OutPort8Tr

; 105  :   OutPort8(COM_PORT + LINE_CONTROL, NO_STOP | NO_PARITY | BITS8);

  00062	6a 69		 push	 105			; 00000069H
  00064	53		 push	 ebx
  00065	6a 03		 push	 3
  00067	57		 push	 edi
  00068	e8 00 00 00 00	 call	 _OutPort8Tr

; 106  :   OutPort8(COM_PORT + INTERRUPT_ENABLE, DISABLE_INTERRUPTS);

  0006d	6a 6a		 push	 106			; 0000006aH
  0006f	53		 push	 ebx
  00070	6a 00		 push	 0
  00072	56		 push	 esi
  00073	e8 00 00 00 00	 call	 _OutPort8Tr
  00078	83 c4 30	 add	 esp, 48			; 00000030H
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx

; 107  :   #endif
; 108  : }

  0007e	c3		 ret	 0
_InitSioUart ENDP
_TEXT	ENDS
END

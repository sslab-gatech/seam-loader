; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24245.0 

	TITLE	D:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\Core\Common\GsSupport.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	___security_cookie
EDATA32	SEGMENT
___security_cookie DD 0ff0a001bH
EDATA32	ENDS
PUBLIC	___security_init_cookie
PUBLIC	@__security_check_cookie@4
PUBLIC	___security_deadloop
PUBLIC	___security_cookie_rdrand
PUBLIC	___report_gsfailure
EXTRN	__ud2:PROC
EXTRN	_RdSeed32:PROC
; Function compile flags: /Ogsp
; File d:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\core\common\gssupport.c
;	COMDAT ___report_gsfailure
_TEXT	SEGMENT
___report_gsfailure PROC				; COMDAT

; 69   :   __security_deadloop();

  00000	e9 00 00 00 00	 jmp	 ___security_deadloop
___report_gsfailure ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\core\common\gssupport.c
;	COMDAT ___security_cookie_rdrand
_TEXT	SEGMENT
_value$ = -4						; size = 4
___security_cookie_rdrand PROC				; COMDAT

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 37   :   UINT8 num_retries = 10; // number of max retries
; 38   :   UINT32 status = 0, value = 0;

  00004	83 65 fc 00	 and	 DWORD PTR _value$[ebp], 0
  00008	53		 push	 ebx
  00009	b3 0a		 mov	 bl, 10			; 0000000aH
$LL2@security_c:

; 39   : 
; 40   :   while (num_retries != 0) {
; 41   :     if (RdSeed32(&value)) {

  0000b	8d 45 fc	 lea	 eax, DWORD PTR _value$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _RdSeed32
  00014	59		 pop	 ecx
  00015	85 c0		 test	 eax, eax
  00017	75 09		 jne	 SHORT $LN5@security_c

; 42   :       status = 1;
; 43   :       break;
; 44   :     }
; 45   :     num_retries--;

  00019	80 eb 01	 sub	 bl, 1

; 46   :     _mm_pause();

  0001c	f3 90		 pause
  0001e	75 eb		 jne	 SHORT $LL2@security_c
  00020	eb 08		 jmp	 SHORT $LN14@security_c
$LN5@security_c:

; 50   :   }
; 51   :   return value;

  00022	8b 45 fc	 mov	 eax, DWORD PTR _value$[ebp]
  00025	5b		 pop	 ebx

; 52   : }

  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN14@security_c:

; 47   :   }
; 48   :   if (status == 0) {
; 49   :     __security_deadloop();

  0002a	e8 00 00 00 00	 call	 ___security_deadloop
$LN16@security_c:
$LN13@security_c:
  0002f	cc		 int	 3
___security_cookie_rdrand ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\core\common\gssupport.c
;	COMDAT ___security_deadloop
_TEXT	SEGMENT
___security_deadloop PROC				; COMDAT

; 28   : {

$DeadLoop$6:

; 29   : DeadLoop:
; 30   :   _ud2();

  00000	e8 00 00 00 00	 call	 __ud2

; 31   :   goto  DeadLoop;

  00005	eb f9		 jmp	 SHORT $DeadLoop$6
___security_deadloop ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\core\common\gssupport.c
;	COMDAT @__security_check_cookie@4
_TEXT	SEGMENT
@__security_check_cookie@4 PROC				; COMDAT
; __StackCookie$ = ecx

; 75   :   if (_StackCookie == __security_cookie) {

  00000	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ___security_cookie
  00006	0f 85 00 00 00
	00		 jne	 ___report_gsfailure

; 76   :     return;
; 77   :   }
; 78   :   __report_gsfailure();
; 79   : }

  0000c	c3		 ret	 0
@__security_check_cookie@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\core\common\gssupport.c
;	COMDAT ___security_init_cookie
_TEXT	SEGMENT
___security_init_cookie PROC				; COMDAT

; 57   :   UINT32 Cookie;
; 58   : 
; 59   :   Cookie = __security_cookie_rdrand();

  00000	e8 00 00 00 00	 call	 ___security_cookie_rdrand

; 60   :   if (Cookie == 0) {

  00005	85 c0		 test	 eax, eax
  00007	0f 84 00 00 00
	00		 je	 ___security_deadloop

; 61   :     __security_deadloop();
; 62   :   }
; 63   :   __security_cookie = Cookie;

  0000d	a3 00 00 00 00	 mov	 DWORD PTR ___security_cookie, eax

; 64   : }

  00012	c3		 ret	 0
___security_init_cookie ENDP
_TEXT	ENDS
END

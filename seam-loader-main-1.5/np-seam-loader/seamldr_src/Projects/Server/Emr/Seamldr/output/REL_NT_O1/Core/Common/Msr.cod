; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24245.0 

	TITLE	D:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\Core\Common\Msr.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	___readMsr
PUBLIC	___readMsr64
PUBLIC	___writeMsr
PUBLIC	_readTsc64
PUBLIC	_calibrateTsc64
EXTRN	__allmul:PROC
; Function compile flags: /Ogsp
; File d:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\core\common\msr.c
;	COMDAT _calibrateTsc64
_TEXT	SEGMENT
_calibrateTsc64 PROC					; COMDAT

; 120  :   UINT64 msr_value = 0;
; 121  :   UINT64 result = 0;
; 122  : 
; 123  :   msr_value = __readMsr64(MSR_PLATFORM_INFO);

  00000	68 ce 00 00 00	 push	 206			; 000000ceH
  00005	e8 00 00 00 00	 call	 ___readMsr64
  0000a	59		 pop	 ecx

; 124  :   result = ((msr_value & (UINT64)0xFF00) >> 8) * 133330;
; 125  :   return result;

  0000b	0f ac d0 08	 shrd	 eax, edx, 8
  0000f	33 d2		 xor	 edx, edx
  00011	52		 push	 edx
  00012	68 d2 08 02 00	 push	 133330			; 000208d2H
  00017	0f b6 c0	 movzx	 eax, al
  0001a	52		 push	 edx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 __allmul

; 126  : }

  00021	c3		 ret	 0
_calibrateTsc64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\core\common\msr.c
;	COMDAT _readTsc64
_TEXT	SEGMENT
_readTsc64 PROC						; COMDAT

; 101  :   return __rdtsc();

  00000	0f 31		 rdtsc

; 102  : }

  00002	c3		 ret	 0
_readTsc64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\core\common\msr.c
;	COMDAT ___writeMsr
_TEXT	SEGMENT
_msr_register$ = 8					; size = 4
_hiDword$ = 12						; size = 4
_loDword$ = 16						; size = 4
___writeMsr PROC					; COMDAT

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 80   :   UINT64 value = ((UINT64)hiDword << 32) | (UINT64)loDword;

  00003	8b 55 0c	 mov	 edx, DWORD PTR _hiDword$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	0b 45 10	 or	 eax, DWORD PTR _loDword$[ebp]

; 81   : 
; 82   :   __writemsr(msr_register, value);

  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _msr_register$[ebp]
  0000e	0f 30		 wrmsr

; 83   :   return;
; 84   : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
___writeMsr ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\core\common\msr.c
;	COMDAT ___readMsr64
_TEXT	SEGMENT
_msr_register$ = 8					; size = 4
___readMsr64 PROC					; COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 62   :   return __readmsr(msr_register);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _msr_register$[ebp]
  00006	0f 32		 rdmsr

; 63   : }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___readMsr64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
; File d:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\core\common\msr.c
;	COMDAT ___readMsr
_TEXT	SEGMENT
_msr_register$ = 8					; size = 4
_pHiDword$ = 12						; size = 4
_pLoDword$ = 16						; size = 4
___readMsr PROC						; COMDAT

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 35   :   UINT64 msr_value = 0;
; 36   : 
; 37   :   msr_value = __readMsr64(msr_register);

  00004	ff 75 08	 push	 DWORD PTR _msr_register$[ebp]
  00007	e8 00 00 00 00	 call	 ___readMsr64
  0000c	59		 pop	 ecx

; 38   :   if (pHiDword != 0) {

  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR _pHiDword$[ebp]
  00010	8b f0		 mov	 esi, eax
  00012	85 c9		 test	 ecx, ecx
  00014	74 02		 je	 SHORT $LN2@readMsr

; 39   :     *pHiDword = (UINT32)(msr_value >> 32);

  00016	89 11		 mov	 DWORD PTR [ecx], edx
$LN2@readMsr:

; 40   :   }
; 41   :   if (pLoDword != 0) {

  00018	8b 45 10	 mov	 eax, DWORD PTR _pLoDword$[ebp]
  0001b	85 c0		 test	 eax, eax
  0001d	74 02		 je	 SHORT $LN3@readMsr

; 42   :     *pLoDword = (UINT32)((msr_value & (UINT64)0xFFFFFFFF));

  0001f	89 30		 mov	 DWORD PTR [eax], esi
$LN3@readMsr:
  00021	5e		 pop	 esi

; 43   :   }
; 44   :   return;
; 45   : }

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
___readMsr ENDP
_TEXT	ENDS
END

; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24245.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	SetupVmcs
EXTRN	__readMsr64:PROC
EXTRN	SeamldrData:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$SetupVmcs DD imagerel $LN4
	DD	imagerel $LN4+588
	DD	imagerel $unwind$SetupVmcs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SetupVmcs DD 0a1401H
	DD	0e3414H
	DD	0f0103214H
	DD	0d00ce00eH
	DD	07008c00aH
	DD	050066007H
xdata	ENDS
; Function compile flags: /Ogsp
; File d:\work\np_seamldr\gnr\po\pr\public\firmware.security.tdx.np-seamldr\seamldr_src\core\commonseamldr64\vmcs64.c
;	COMDAT SetupVmcs
_TEXT	SEGMENT
tv312 = 96
SeamPtBaseAddr$ = 96
tv284 = 104
SetupVmcs PROC						; COMDAT

; 31   : void SetupVmcs(UINT64 SeamPtBaseAddr) {

$LN4:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 54		 push	 r12
  0000a	41 55		 push	 r13
  0000c	41 56		 push	 r14
  0000e	41 57		 push	 r15
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 32   :     
; 33   :     UINT64 VmcsBaseVa = SeamldrData.SeamrrVa + (SeamldrData.PSysInfoTable->PSeamldrRange.Base - SeamldrData.SeamrrBase) + _4KB;

  00014	48 8b 05 48 00
	00 00		 mov	 rax, QWORD PTR SeamldrData+72
  0001b	48 8b e9	 mov	 rbp, rcx

; 34   :     VmxBasicMsr_u VmxBasic;
; 35   :     UINT32 PinbasedCtls;
; 36   :     UINT32 ProcbasedCtls;
; 37   :     UINT32 ExitCtls;
; 38   :     UINT32 EntryCtls;
; 39   :     UINT64 Cr0Fixed0, Cr0Fixed1, Cr0MustBe1;
; 40   :     UINT64 Cr4Fixed0, Cr4Fixed1, Cr4MustBe1;
; 41   :     
; 42   :     VmxBasic.raw = readMsr64(IA32_VMX_BASIC_MSR_INDEX);

  0001e	b9 80 04 00 00	 mov	 ecx, 1152		; 00000480H
  00023	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00027	48 2b 05 38 00
	00 00		 sub	 rax, QWORD PTR SeamldrData+56
  0002e	48 89 44 24 60	 mov	 QWORD PTR tv312[rsp], rax
  00033	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR SeamldrData
  0003a	48 89 44 24 68	 mov	 QWORD PTR tv284[rsp], rax
  0003f	e8 00 00 00 00	 call	 __readMsr64

; 43   :     
; 44   :     PinbasedCtls = (UINT32)(readMsr64(IA32_VMX_TRUE_PINBASED_CTLS_MSR_INDEX) & MAX_DWORD);

  00044	b9 8d 04 00 00	 mov	 ecx, 1165		; 0000048dH
  00049	48 8b d8	 mov	 rbx, rax
  0004c	e8 00 00 00 00	 call	 __readMsr64

; 45   :     ProcbasedCtls = (UINT32)(readMsr64(IA32_VMX_TRUE_PROCBASED_CTLS_MSR_INDEX) & MAX_DWORD);

  00051	b9 8e 04 00 00	 mov	 ecx, 1166		; 0000048eH
  00056	4c 8b e8	 mov	 r13, rax
  00059	e8 00 00 00 00	 call	 __readMsr64

; 46   :     ExitCtls = (UINT32)(readMsr64(IA32_VMX_TRUE_EXIT_CTLS_MSR_ADDR) & MAX_DWORD);

  0005e	b9 8f 04 00 00	 mov	 ecx, 1167		; 0000048fH
  00063	4c 8b e0	 mov	 r12, rax
  00066	e8 00 00 00 00	 call	 __readMsr64

; 47   :     EntryCtls = (UINT32)(readMsr64(IA32_VMX_TRUE_ENTRY_CTLS_MSR_ADDR) & MAX_DWORD);

  0006b	b9 90 04 00 00	 mov	 ecx, 1168		; 00000490H
  00070	4c 8b f0	 mov	 r14, rax
  00073	e8 00 00 00 00	 call	 __readMsr64

; 48   : 
; 49   :     Cr0Fixed0 = readMsr64(IA32_VMX_CR0_FIXED0_MSR_INDEX);

  00078	b9 86 04 00 00	 mov	 ecx, 1158		; 00000486H
  0007d	4c 8b f8	 mov	 r15, rax
  00080	e8 00 00 00 00	 call	 __readMsr64

; 50   :     Cr0Fixed1 = readMsr64(IA32_VMX_CR0_FIXED1_MSR_INDEX);

  00085	b9 87 04 00 00	 mov	 ecx, 1159		; 00000487H
  0008a	48 8b f8	 mov	 rdi, rax
  0008d	e8 00 00 00 00	 call	 __readMsr64
  00092	48 8b f0	 mov	 rsi, rax

; 51   :     Cr0MustBe1 = Cr0Fixed1 & Cr0Fixed0;
; 52   :     Cr4Fixed0 = readMsr64(IA32_VMX_CR4_FIXED0_MSR_INDEX);

  00095	b9 88 04 00 00	 mov	 ecx, 1160		; 00000488H
  0009a	48 23 f7	 and	 rsi, rdi
  0009d	e8 00 00 00 00	 call	 __readMsr64

; 53   :     Cr4Fixed1 = readMsr64(IA32_VMX_CR4_FIXED1_MSR_INDEX);

  000a2	b9 89 04 00 00	 mov	 ecx, 1161		; 00000489H
  000a7	48 8b f8	 mov	 rdi, rax
  000aa	e8 00 00 00 00	 call	 __readMsr64

; 54   :     Cr4MustBe1 = Cr4Fixed1 & Cr4Fixed0;
; 55   :             
; 56   :     Wr_Guest_RIP(VmcsBaseVa, NON_CANONICAL_RIP);

  000af	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv312[rsp]
  000b4	48 23 c7	 and	 rax, rdi
  000b7	48 8b 7c 24 68	 mov	 rdi, QWORD PTR tv284[rsp]

; 57   :     Wr_Host_CR0(VmcsBaseVa, CR0_PE | CR0_ET | CR0_NE | CR0_WP | CR0_PG | Cr0MustBe1);
; 58   :     Wr_Host_CR3(VmcsBaseVa, SeamPtBaseAddr);
; 59   :     Wr_Host_CR4(VmcsBaseVa, CR4_DE | CR4_PAE | CR4_PGE | CR4_OSFXSR | CR4_OSXMMEXCPT | CR4_VMXE | CR4_FSGSBASE | CR4_OSXSAVE | CR4_SMEP | CR4_SMAP | CR4_CET | Cr4MustBe1);

  000bc	48 0d a8 26 b5
	00		 or	 rax, 11871912		; 00b526a8H
  000c2	48 ba 00 00 00
	00 00 00 00 10	 mov	 rdx, 1152921504606846976 ; 1000000000000000H
  000cc	48 89 84 39 38
	13 00 00	 mov	 QWORD PTR [rcx+rdi+4920], rax

; 60   :     Wr_Host_CS_Selector(VmcsBaseVa, 8U);
; 61   :     Wr_Host_SS_Selector(VmcsBaseVa, 0x10U);
; 62   :     Wr_Host_FS_Selector(VmcsBaseVa, 0x18U);
; 63   :     Wr_Host_GS_Selector(VmcsBaseVa, 0x18U);
; 64   :     Wr_Host_TR_Selector(VmcsBaseVa, 0x20U);

  000d4	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  000d9	48 89 94 39 d8
	11 00 00	 mov	 QWORD PTR [rcx+rdi+4568], rdx
  000e1	ba 31 00 01 80	 mov	 edx, -2147418063	; 80010031H
  000e6	48 0b f2	 or	 rsi, rdx
  000e9	66 89 84 39 cc
	10 00 00	 mov	 WORD PTR [rcx+rdi+4300], ax
  000f1	48 89 b4 39 28
	13 00 00	 mov	 QWORD PTR [rcx+rdi+4904], rsi

; 65   :     Wr_Host_IA32_PAT(VmcsBaseVa, 0x0006060606060606ULL);

  000f9	48 b8 06 06 06
	06 06 06 06 00	 mov	 rax, 1695472800892422	; 0006060606060606H
  00103	48 8b f1	 mov	 rsi, rcx
  00106	48 89 84 39 10
	13 00 00	 mov	 QWORD PTR [rcx+rdi+4880], rax
  0010e	48 89 ac 39 30
	13 00 00	 mov	 QWORD PTR [rcx+rdi+4912], rbp
  00116	c7 84 39 c2 10
	00 00 08 00 10
	00		 mov	 DWORD PTR [rcx+rdi+4290], 1048584 ; 00100008H
  00121	c7 84 39 c8 10
	00 00 18 00 18
	00		 mov	 DWORD PTR [rcx+rdi+4296], 1572888 ; 00180018H

; 66   :     Wr_Host_IA32_S_Cet(VmcsBaseVa, IA32_CR_S_CET_SH_STK_EN_MASK | IA32_CR_S_CET_ENDBR_EN_MASK | IA32_CR_S_CET_NO_TRACK_EN_MASK);

  0012c	48 c7 84 39 58
	14 00 00 15 00
	00 00		 mov	 QWORD PTR [rcx+rdi+5208], 21

; 67   :     Wr_Host_IA32_EFER(VmcsBaseVa, N_IA32_EFER_LMA | LME | N_IA32_EFER_NXE);

  00138	48 c7 84 39 18
	13 00 00 00 0d
	00 00		 mov	 QWORD PTR [rcx+rdi+4888], 3328 ; 00000d00H

; 68   : 
; 69   :     ExitCtls |= (VM_EXIT_CTRL_SAVE_DEBUG_CTRL | VM_EXIT_CTRL_HOST_ADDR_SPACE_SIZE | VM_EXIT_CTRL_SAVE_IA32_PAT | VM_EXIT_CTRL_LOAD_IA32_PAT | \
; 70   :                  VM_EXIT_CTRL_SAVE_IA32_EFER | VM_EXIT_CTRL_LOAD_IA32_EFER | VM_EXIT_CTRL_CONCEAL_VMX_FROM_PT | VM_EXIT_CTRL_CLEAR_IA32_RTIT_CTL | \
; 71   :                  VM_EXIT_CTRL_CLEAR_LBR_CTL | VM_EXIT_CTRL_LOAD_CET_HOST_STATE | VM_EXIT_SAVE_IA32_PERF_GLOBAL_CTRL | VM_EXIT_LOAD_IA32_PERF_GLOBAL_CTRL);
; 72   : 
; 73   :     ExitCtls &= ((readMsr64(IA32_VMX_TRUE_EXIT_CTLS_MSR_ADDR) >> 32) & MAX_DWORD);

  00144	b9 8f 04 00 00	 mov	 ecx, 1167		; 0000048fH
  00149	e8 00 00 00 00	 call	 __readMsr64
  0014e	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00152	41 81 ce 04 12
	3c 57		 or	 r14d, 1463554564	; 573c1204H
  00159	41 23 c6	 and	 eax, r14d

; 74   : 
; 75   :     Wr_VM_Exit_Control(VmcsBaseVa, ExitCtls);
; 76   : 
; 77   :     EntryCtls |= (VM_ENTRY_CTRL_LOAD_DEBUG_CTRL | VM_ENTRY_CTRL_LOAD_IA32_PERF_GLOBAL_CTRL | VM_ENTRY_CTRL_LOAD_IA32_PAT | VM_ENTRY_CTRL_LOAD_IA32_EFER | \
; 78   :                   VM_ENTRY_CTRL_CONCEAL_VMX_FROM_PT | VM_ENTRY_CTRL_LOAD_UINV | VM_ENTRY_CTRL_LOAD_IA32_PKRS | \
; 79   :                   VM_ENTRY_CTRL_LOAD_IA32_RTIT_CTL | VM_ENTRY_CTRL_LOAD_GUEST_CET_STATE | VM_ENTRY_CTRL_LOAD_LBR_CTL);
; 80   : 
; 81   :     EntryCtls &= ((readMsr64(IA32_VMX_TRUE_ENTRY_CTLS_MSR_ADDR) >> 32) & MAX_DWORD);

  0015c	b9 90 04 00 00	 mov	 ecx, 1168		; 00000490H
  00161	89 84 3e 5c 11
	00 00		 mov	 DWORD PTR [rsi+rdi+4444], eax
  00168	e8 00 00 00 00	 call	 __readMsr64
  0016d	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00171	41 81 cf 04 e0
	7e 00		 or	 r15d, 8314884		; 007ee004H
  00178	41 23 c7	 and	 eax, r15d

; 82   : 
; 83   :     Wr_VM_Entry_Control(VmcsBaseVa, EntryCtls);
; 84   : 
; 85   :     Wr_VM_Execution_Control_Pin_Based(VmcsBaseVa, PinbasedCtls);

  0017b	44 89 ac 3e 28
	11 00 00	 mov	 DWORD PTR [rsi+rdi+4392], r13d
  00183	89 84 3e b8 12
	00 00		 mov	 DWORD PTR [rsi+rdi+4792], eax

; 86   :     Wr_VM_Execution_Control_Proc_Based(VmcsBaseVa, ProcbasedCtls);
; 87   :     
; 88   :     Wr_Host_RIP(VmcsBaseVa, (C_CODE_RGN_BASE | SeamldrData.AslrRand) + SeamldrData.PSeamldrConsts->CEntryPointOffset);

  0018a	48 b8 00 00 00
	00 00 80 ff ff	 mov	 rax, -140737488355328	; ffff800000000000H
  00194	44 89 a4 3e 20
	11 00 00	 mov	 DWORD PTR [rsi+rdi+4384], r12d
  0019c	48 8b 0d 10 00
	00 00		 mov	 rcx, QWORD PTR SeamldrData+16
  001a3	48 0b c8	 or	 rcx, rax
  001a6	48 8b 05 88 01
	00 00		 mov	 rax, QWORD PTR SeamldrData+392
  001ad	48 03 48 28	 add	 rcx, QWORD PTR [rax+40]
  001b1	48 89 8c 3e 08
	13 00 00	 mov	 QWORD PTR [rsi+rdi+4872], rcx

; 89   :     Wr_Host_FS_Base(VmcsBaseVa, C_SYS_INFO_TABLE_BASE | SeamldrData.AslrRand);

  001b9	48 b9 00 00 ff
	ff 03 80 ff ff	 mov	 rcx, -140720308551680	; ffff8003ffff0000H
  001c3	48 8b 05 10 00
	00 00		 mov	 rax, QWORD PTR SeamldrData+16
  001ca	48 0b c1	 or	 rax, rcx
  001cd	48 89 84 3e 50
	13 00 00	 mov	 QWORD PTR [rsi+rdi+4944], rax

; 90   :     
; 91   :     UINT64 HostRSP = (C_STACK_RGN_BASE | SeamldrData.AslrRand) + SeamldrData.PSeamldrConsts->CDataStackSize - 8;
; 92   :     UINT64 HostSSP = (C_STACK_RGN_BASE | SeamldrData.AslrRand) + SeamldrData.PSeamldrConsts->CDataStackSize + P_SEAMLDR_SHADOW_STACK_SIZE - 8;

  001d5	48 b8 00 00 00
	00 01 80 ff ff	 mov	 rax, -140733193388032	; ffff800100000000H
  001df	4c 8b 0d 10 00
	00 00		 mov	 r9, QWORD PTR SeamldrData+16
  001e6	4d 8b c1	 mov	 r8, r9
  001e9	4c 0b c0	 or	 r8, rax
  001ec	48 8b 05 88 01
	00 00		 mov	 rax, QWORD PTR SeamldrData+392
  001f3	48 8b 08	 mov	 rcx, QWORD PTR [rax]

; 93   :     UINT64 HostGSBase = (C_DATA_RGN_BASE | SeamldrData.AslrRand);

  001f6	48 b8 00 00 00
	00 03 80 ff ff	 mov	 rax, -140724603453440	; ffff800300000000H
  00200	4c 0b c8	 or	 r9, rax

; 94   : 
; 95   :     Wr_Host_RSP(VmcsBaseVa, HostRSP);
; 96   :     Wr_Host_SSP(VmcsBaseVa, HostSSP);
; 97   :     Wr_Host_GS_Base(VmcsBaseVa, HostGSBase);

  00203	4c 89 8c 3e 58
	13 00 00	 mov	 QWORD PTR [rsi+rdi+4952], r9
  0020b	48 8d 91 f8 0f
	00 00		 lea	 rdx, QWORD PTR [rcx+4088]
  00212	49 03 d0	 add	 rdx, r8
  00215	48 8d 41 f8	 lea	 rax, QWORD PTR [rcx-8]
  00219	49 03 c0	 add	 rax, r8
  0021c	48 89 94 3e 60
	14 00 00	 mov	 QWORD PTR [rsi+rdi+5216], rdx

; 98   :     Wr_VMCS_Revision_ID(VmcsBaseVa, (UINT32)VmxBasic.RevisionIdentifier & 0x7FFFFFFF);

  00224	0f ba f3 1f	 btr	 ebx, 31
  00228	48 89 84 3e 00
	13 00 00	 mov	 QWORD PTR [rsi+rdi+4864], rax
  00230	89 9c 3e 00 10
	00 00		 mov	 DWORD PTR [rsi+rdi+4096], ebx

; 99   : }

  00237	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  0023c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00240	41 5f		 pop	 r15
  00242	41 5e		 pop	 r14
  00244	41 5d		 pop	 r13
  00246	41 5c		 pop	 r12
  00248	5f		 pop	 rdi
  00249	5e		 pop	 rsi
  0024a	5d		 pop	 rbp
  0024b	c3		 ret	 0
SetupVmcs ENDP
_TEXT	ENDS
END
